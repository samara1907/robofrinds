{"version":3,"sources":["Components/Card.js","Components/Cardlist.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","Cardlist","robots","map","user","i","key","SearchBox","searchfield","searchchange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onRequestRobots","onsearchchange","isPending","filterrobota","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","intialStateSearch","intialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.fe4aa365.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card =(props)=>{\r\n\tconst {name , email , id} = props;\r\n\treturn(\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robo' src={`https://robohash.org/${id}?200*200`} />\r\n\t\t\t<div>\r\n\t\t\t<h2> {name} </h2>\r\n\t\t\t<p> {email} </p>\r\n\t\t\t</div>\r\n\r\n\t\t</div>\r\n\r\n\t);\r\n}\r\n\r\n\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cardlist=({ robots }) => {\r\n\treturn(\r\n\t\t<div>\r\n\t\t{robots.map((user , i) =>{\r\n\t\treturn <Card \r\n\t\tkey={i} \r\n\t\tid={robots[i].id} \r\n\t\tname={robots[i].name} \r\n\t\temail={robots[i].email} />\r\n\t})}\r\n\r\n\t   </div>\r\n   );\r\n}\r\n\r\nexport default Cardlist;","import React from 'react';\r\n\r\nconst SearchBox =({searchfield , searchchange}) =>{\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t<input \r\n\t\tclassName='pa3 ba b-green bg-light-blue' \r\n\t\ttype='search' \r\n\t\tplaceholder='search robots'\r\n\t\tonChange ={searchchange}\r\n\r\n\t\t />\r\n\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\nconst Scroll =(props) =>{\r\n\treturn(\r\n\t<div style={{overflowY: 'scroll', border: '1px solid black' , height:'700px'}}>\r\n\t\t{props.children}\r\n\t</div>\r\n\t);\r\n};\r\n\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state={\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\tcomponentDidCatch(error, info){\r\n\t\tthis.setState({hasError:true})\r\n\r\n\t}\r\n\r\n\r\n\trender(){\r\n\t\tif (this.state.hasError){\r\n\t\t\treturn <h2>Ooops. bad issue</h2>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\nexport default ErrorBoundry;","import React , {Component} from 'react';\r\nimport {connect } from 'react-redux';\r\nimport Cardlist from '../Components/Cardlist';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport '../containers/App.css';\r\nimport Scroll from '../Components/Scroll';\r\nimport ErrorBoundry from '../Components/ErrorBoundry';\r\nimport {setSearchfield, requestRobots} from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n\treturn { searchfield: state.searchRobots.searchfield,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n\treturn {onsearchchange: (event) => dispatch(setSearchfield(event.target.value)) ,\r\n\t\t\tonRequestRobots: () => dispatch(requestRobots())\r\n\t}\r\n}\r\n\r\n\r\nclass App extends Component {\r\n\tcomponentDidMount(){\r\n\t\tthis.props.onRequestRobots()\r\n\t}\r\n\r\n\trender(){\r\n\t\tconst {searchfield , onsearchchange, robots, isPending} = this.props;\r\n\t\tconst filterrobota = robots.filter(robots=>{\r\n\t\t\treturn robots.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\t\t})\r\n\t\treturn isPending ?\r\n\t\t\t <h1>Loading</h1> :\r\n\t\t\t (\r\n\t\t\t<div className='tc'>\r\n\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t\t<SearchBox searchchange={onsearchchange} />\r\n\t\t\t<Scroll>\r\n\t\t\t\t<ErrorBoundry>\r\n\t\t \t\t\t<Cardlist robots={filterrobota} /> \r\n\t\t \t\t</ErrorBoundry>\r\n\t\t \t</Scroll>\r\n\t\t \t</div>\r\n\t\t );\r\n\t\t}\r\n\r\n\t}\r\n\t\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {CHANGE_SEARCH_FIELD , REQUEST_ROBOTS_PINDING,\r\n REQUEST_ROBOTS_SUCCESS , \r\n REQUEST_ROBOTS_FAILED} from './constants.js';\r\n\r\n\r\nexport const setSearchfield=(text)=>({\r\n\ttype: CHANGE_SEARCH_FIELD ,\r\n\tpayload: text\r\n})\r\n\r\nexport const requestRobots =() => (dispatch) => {\r\n\tdispatch({type:REQUEST_ROBOTS_PINDING});\r\n\tfetch('https://jsonplaceholder.typicode.com/users').then(response=> response.json())\r\n\t.then(data=>dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n\t.catch(error=> dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","export const CHANGE_SEARCH_FIELD ='CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PINDING ='REQUEST_ROBOTS_PINDING';\r\nexport const REQUEST_ROBOTS_SUCCESS ='REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED ='REQUEST_ROBOTS_FAILED';\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {CHANGE_SEARCH_FIELD , REQUEST_ROBOTS_PINDING,\r\n REQUEST_ROBOTS_SUCCESS , \r\n REQUEST_ROBOTS_FAILED} from './constants.js';\r\n\r\n\r\n\r\nconst intialStateSearch = {\r\n\tsearchfield:''\r\n}\r\n\r\n\r\nexport const searchRobots =(state=intialStateSearch , action={}) =>{\r\n\tswitch(action.type){\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t return Object.assign({}, state, {searchfield: action.payload})\r\n\t\tdefault:\r\n\t\t return state;\r\n\r\n\t}\r\n\r\n}\r\n\r\nconst intialStateRobots = {\r\n\tisPending:false,\r\n\trobots:[],\r\n\terror:''\r\n}\r\n\r\nexport const requestRobots = (state = intialStateRobots , action={})=>{\r\n\tswitch(action.type){\r\n\t\tcase REQUEST_ROBOTS_PINDING:\r\n\t\t return Object.assign({} , state , {isPending:true})\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t return Object.assign({}, state , {robots:action.payload , isPending:false})\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t return Object.assign({}, state, {error: action.payload, isPending:false})\r\n\t\tdefault:\r\n\t\t return state;\r\n\t}\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider} from 'react-redux';\nimport {createStore , applyMiddleware, combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport {searchRobots, requestRobots} from './reducers'\n\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots})\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware ,logger));\n\n\nReactDOM.render(\n  <React.StrictMode>\n  <Provider store={store}>\n  \t<App />\n  </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}