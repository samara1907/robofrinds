{"ast":null,"code":"import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PINDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants.js';\nexport const setSearchfield = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\nexport const requestRobots = () => dispatch => {\n  dispatch({\n    type: REQUEST_ROBOTS_PINDING\n  });\n  fetch('https://jsonplaceholder.typcode.com/users').then(response => response.json()).then(data => dispatch({\n    type: REQUEST_ROBOTS_SUCCESS,\n    payload: data\n  })).catch(error => dispatch({\n    type: REQUEST_ROBOTS_FAILED,\n    payload: error\n  }));\n};","map":{"version":3,"sources":["C:/Users/pc link/Desktop/robofrinds/src/actions.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PINDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","setSearchfield","text","type","payload","requestRobots","dispatch","fetch","then","response","json","data","catch","error"],"mappings":"AAAA,SAAQA,mBAAR,EAA8BC,sBAA9B,EACCC,sBADD,EAECC,qBAFD,QAE6B,gBAF7B;AAKA,OAAO,MAAMC,cAAc,GAAEC,IAAD,KAAS;AACpCC,EAAAA,IAAI,EAAEN,mBAD8B;AAEpCO,EAAAA,OAAO,EAAEF;AAF2B,CAAT,CAArB;AAKP,OAAO,MAAMG,aAAa,GAAE,MAAOC,QAAD,IAAc;AAC/CA,EAAAA,QAAQ,CAAC;AAACH,IAAAA,IAAI,EAACL;AAAN,GAAD,CAAR;AACAS,EAAAA,KAAK,CAAC,2CAAD,CAAL,CAAmDC,IAAnD,CAAwDC,QAAQ,IAAGA,QAAQ,CAACC,IAAT,EAAnE,EACCF,IADD,CACMG,IAAI,IAAEL,QAAQ,CAAC;AAACH,IAAAA,IAAI,EAAEJ,sBAAP;AAA+BK,IAAAA,OAAO,EAAEO;AAAxC,GAAD,CADpB,EAECC,KAFD,CAEOC,KAAK,IAAGP,QAAQ,CAAC;AAACH,IAAAA,IAAI,EAAEH,qBAAP;AAA8BI,IAAAA,OAAO,EAAES;AAAvC,GAAD,CAFvB;AAGA,CALM","sourcesContent":["import {CHANGE_SEARCH_FIELD , REQUEST_ROBOTS_PINDING,\r\n REQUEST_ROBOTS_SUCCESS , \r\n REQUEST_ROBOTS_FAILED} from './constants.js';\r\n\r\n\r\nexport const setSearchfield=(text)=>({\r\n\ttype: CHANGE_SEARCH_FIELD ,\r\n\tpayload: text\r\n})\r\n\r\nexport const requestRobots =() => (dispatch) => {\r\n\tdispatch({type:REQUEST_ROBOTS_PINDING});\r\n\tfetch('https://jsonplaceholder.typcode.com/users').then(response=> response.json())\r\n\t.then(data=>dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n\t.catch(error=> dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}"]},"metadata":{},"sourceType":"module"}